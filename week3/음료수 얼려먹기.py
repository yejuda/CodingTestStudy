# 얼음틀 중에서 0인 부분은 뚫려있는 부분으로 아이스크림을 생성하는데 필요한 부분이다.

# 얼음틀 중 1인 부분은 칸막이가 있는 부분으로 모양을 결정해 준다.

# 문제에서는 생성 가능한 아이스크림의 개수를 물어봤으므로 0인 부분을 중점적으로 확인해야 한다.

# 즉, 맨 왼쪽 위부터 차례로 모두 탐색해 0인 위치를 찾았으면 그 지점 기준으로 연결된 모든 0인 부분을 모두 1로 만들면 결과적으로 연결된 부분을 한 번만 카운트하게 되는 효과를 얻게 된다.

# 다시 말해, 우리는 0인 부분의 총 개수를 구하는 것이 아닌 0으로 연결된 덩어리 개수를 구하므로 한 번만 카운트하면 된다.
# 따라서, 0인 지점에서 카운트를 한 번하고 dfs 알고리즘을 통해 재귀적으로 연결된 모든 0인 부분을 1로 만들게 구현하면 된다.

# 구멍이 뚫려있는 부분을 찾았으면 True를 반환하게 하는 함수(dfs)를 구현한다.

# 구체적으로 해당 함수는 찾은 구멍이 뚫려있는 부분을 기준으로 최대한 탐색해서 뚫려있으면서 연결되어 있는 모든 0인 부분을 1로 만들고 True를 반환한다.

# 이때 모든 탐색하는 알고리즘을 dfs 알고리즘을 사용해 구현하는데 얼음틀을 벗어나면 False를 반환하게 한다.

# 탐색한 부분이 0이 아닌 칸막이 부분이면 False를 반환하게 한다.

# dfs 함수 결과가 True인 개수를 카운트한다.


# n,m 공백 구분하여 입력받기
n,m = map(int, input().split())

# 2차원 리스트의 맵 정보 입력받기
graph = []
for i in range(n):
    graph.append(list(map(int, input())))
# 출력
# 4 5 
# 00110
# 00011
# 11111
# 00000
# ------------------------------------------------------

# 특정한 노드 방문 후에 연결된 모든 노드들 방문(DFS 사용)
def dfs(x, y):
    # 주어진 범위 벗어날 시 즉시 종료
    if x <= -1 or x >= n or y <= -1 or y >= m:
        return False
    # 현재 노드를 아직 방문하지 않았다면
    if graph[x][y] == 0:
        # 현재 노드 방문 처리
        graph[x][y] = 1
        # 재귀적 호출
        dfs(x-1, y)   # 상
        dfs(x+1, y)   # 하
        dfs(x, y-1)   # 좌
        dfs(x , y+1)  # 우
        return True
    return False

# 모든 위치에 음료수 채우기
result = 0
for i in  range(n):
    for j in range(m):
        if dfs(i,j) == True:
            result += 1  # dfs 함수 결과가 True인 개수를 카운트
    
print(result)   
#  출력 3
